apply plugin: 'com.android.library'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //权限请求
    api 'com.mylhyl:acp:1.1.7'

    api 'com.zhy:autolayout:1.4.5'

    api 'com.android.support:recyclerview-v7:27.1.1'

    api 'com.squareup.retrofit2:retrofit:2.3.0'
    api 'com.squareup.okhttp3:okhttp:3.8.1'

    api 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    api 'com.squareup.retrofit2:converter-gson:2.3.0'
    api 'com.squareup.retrofit2:converter-scalars:2.3.0'
    api 'io.reactivex.rxjava2:rxjava:2.1.1'
    api 'io.reactivex.rxjava2:rxandroid:2.0.1'

    api 'com.alibaba:fastjson:1.2.54'

    api 'top.zibin:Luban:1.1.2'

    api 'com.github.bumptech.glide:glide:3.7.0'

    api 'com.orhanobut:logger:2.1.1'

    //zhihu选择图片
    api 'com.zhihu.android:matisse:0.4.3'

}

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

//Properties prop = new Properties()
//prop.load(project.rootProject.file('gradle.properties').newDataInputStream())

def siteUrl = PROJ_WEBSITEURL     // 项目主页
def gitUrl = PROJ_VCSURL   // //项目的版本控制地址
group = PROJ_GROUP       // //发布到组织名称名字，必须填写

//发布到JCenter上的项目名字，必须填写
def libName = "AndroidFKLib"

// 版本号
version = PROJ_VERSION
/**  上面配置后上传至jcenter后的编译路径是这样的： compile 'https://github.com/JohnsonHou/SkinLibrary:1.0.1'  **/


//生成源文件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//生成文档
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.encoding "UTF-8"
    options.charSet 'UTF-8'
    options.author true
    options.version true
//    options.links "https://github.com/linglongxin24/FastDev/tree/master/mylibrary/docs/javadoc"
    failOnError false
}

//文档打包成jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//拷贝javadoc文件
task copyDoc(type: Copy) {
    from "${buildDir}/docs/"
    into "docs"
}

javadoc {
    options {
        encoding "UTF-8"
    }
}
//上传到jcenter所需要的源码文件
artifacts {
    archives javadocJar
    archives sourcesJar
}

// 配置maven库，生成POM.xml文件
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'                // Add your description here
                name PROJ_ARTIFACTID
                description PROJ_DESCRIPTION
                url siteUrl                // Set your license
                licenses {
                    license {
                        name LICENSE_NAME
                        url LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id DEVELOPER_ID
                        name DEVELOPER_NAME
                        email DEVELOPER_EMAIL
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

//上传到jcenter
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())


bintray {
    user = properties.getProperty("bintray.user")//读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")//读取 local.properties 文件里面的 bintray.apikey

    configurations = ['archives']
    pkg {
        repo = "maven"        // it is the name that appears in bintray when logged
        name = libName //发布到JCenter上的项目名字，必须填写
        desc = 'This is a FK framework'    //项目描述
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}



